The fetch function in JavaScript is a modern, built-in API for making HTTP requests to servers. It's used to retrieve or submit data asynchronously, similar to how the older XMLHttpRequest (XHR) API works but with a more powerful and flexible interface.

Key Features of fetch ->>
    1. Promise-Based: fetch returns a Promise, making it easier to handle asynchronous requests with the async/await syntax or by chaining .then() and .catch() methods.

    2. implified Syntax: Compared to XMLHttpRequest, fetch has a more straightforward and concise syntax for making requests.

ek basic fetch ka use

fetch('https://api.github.com/users/vivek4nag')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json(); // Parsing the JSON from the response
  })
  .then(data => {
    console.log(data); // Handling the parsed data
  })
  .catch(error => {
    console.error('There has been a problem with your fetch operation:', error);
  });


Making a Request: fetch('https://api.github.com/users/vivek4nag'): Initiates a network request to the specified URL. By default, it makes a GET request.

Handling the Response:
    1. The fetch function returns a Promise that resolves to the Response object representing the HTTP response.
    2. response.ok: A boolean property indicating if the request was successful (status code 200-299).
    3. response.json(): A method that reads the response body and parses it as JSON. This also returns a Promise.

Error Handling: If the request fails (e.g., network issues or a non-200 status code), the .catch() block catches the error and logs it.

# Note remember ==> 
    Q. suppose you made a fetch & you get a error code 404. So where will this error code be received?? is it in resolve or in reject?

    Ans. When you make a fetch request and receive an HTTP error status like 404, the Promise returned by fetch does not reject. Instead, it resolves normally, and the error status is reflected in the Response object.
    The Promise returned by fetch will always resolve when the request is successful at the network level (i.e., the server responds), regardless of the HTTP status code. A 404 error will be received in the resolve part of the fetch Promise, not in the reject.